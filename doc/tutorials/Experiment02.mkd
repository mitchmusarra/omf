TUTORIAL
# Experiment 02

1. “Hello World” - Wireless
---------------------------

This simple tutorial presents all the basic steps to develop, run, and 
access the result of a wireless network experiment with OMF 6.
Subsequent tutorials will build on this one to introduce further OMF
features.

If you are a new OMF user (i.e. an experimenter), you may want to read
the [OMF sytem overview]
(http://omf.mytestbed.net/projects/omf/wiki/An_Introduction_to_OMF)
or the [experimenter overview] 
(http://omf.mytestbed.net/projects/omf/wiki/UsageOverview)
pages

**Objectives**

After reading this tutorial you should be able to:

- develop a simple networking experiment using OEDL, the OMF Experiment
Description Language
- orchestrate that experiment using two OMF-enabled resources of PC type with wireless interfaces
- access the measurements collected during that experiment run

**Files**

The experiment description (aka OEDL script) is: 
{file:doc/tutorials/experiment02.rb experiment02.rb}

**Experiment Scenario**

The following figure shows the simple experiment scenario for this tutorial:

![Figure 1. Simple experiment scenario](images/tutorial01-fig1.png)

- This experiment involves two resources of type PC with wireless capabilities:
Node 1 and Node 2
- Node 1 is running a simple UDP traffic generator application (OTG2)
- Node 2 is running a simple traffic receiver application (OTR2)
- Node 1 is the “Sender” and will generate and send traffic to the
“Receiver” node 2, over a wireless (IEEE 802.11g) channel.
- OTG and OTR are OML-enabled applications and are configured to report statistics 
about the sent and received traffic to an OML server.

Note: when using PC-type resources on the NICTA or ORBIT testbeds, the 
applications OTG2 and OTR2 should already be pre-installed in the default
image of your resources. If you are using another OMF enabled testbed, you
may install these applications on your node image by following the instructions on 
[the OML Application pages]
(http://mytestbed.net/projects/omlapp/wiki/OML-instrumented_Applications#Installing-the-Applications).

2. Prerequisites
--------------------------------------------------------------

### 2a) Accessing/Provisioning Resources

This tutorial assumes that you are using OMF-enabled resources with WLAN interfaces, which are
provided by either a NICTA or ORBIT testbed. This section briefly describes
the steps to reserve and provision resources on these testbeds.

You can complete this tutorial with OMF-enabled resources which are provided
by other testbeds. In such a case, please refer to these testbeds' specific 
documentation for instructions on how to reserve/provision their resources with OMF.

Alternatively you may also decide to install OMF on your own testbed, if
so then please follow the instructions for testbed operators on our
{file:doc/INSTALLATION.mkd OMF 6 Installation Guide}. Remember to install 802.11g compatible
wireless cards (we use cards that support the ath5k or ath9k driver).

**Accessing Resources at NICTA/ORBIT**

- Are you using a testbed at NICTA? Please refer to the 
[OMF at NICTA Getting Started page]
(http://mytestbed.net/projects/omf/wiki/OMFatNICTA)
- Are you using a testbed at ORBIT? Please refer to the 
[OMF at ORBIT Getting Started page]
(http://mytestbed.net/projects/omf/wiki/OMFatWINLAB)

**Provisioning Resources at NICTA/ORBIT**

The current version of OMF 6 does not yet have a complete process in place
to provision a PC-type resource at NICTA or ORBIT. Such feature will be added
in the next release. Provisioning in the context of PC-type resources at NICTA
and ORBIT means having a specific user disk image loaded on the resource.

In the meantime, please use the method described on 
[the OMF 5.4 imaging page]
(http://mytestbed.net/projects/omf54/wiki/BasicTutorialStage7-5-4)
for instruction on how to provision/image resources at NICTA or ORBIT.

Using these instructions, make sure that you load a disk image onto your resources
that contains OMF 6 (normally the latest baseline.ndz image will do).

### 2b) Installing the Experiment Controller


The OMF Experiment Controller (EC) is the software that will interpret
your Experiment Description (ED) and interact with the resources to 
execute it accordingly. You can either:

- use a pre-installed EC on the consoles of any NICTA or ORBIT testbeds
- or install your own EC on your machine, by following the instructions
for users on our {file:doc/INSTALLATION.mkd OMF 6 Installation Guide}

This tutorial assumes the latter, i.e. you have installed an EC on your
machine and will use it to orchestrate your experiment


3. Developing the “Hello World” Experiment
------------------------------------------------------

To run an experiment with OMF, you first need to describe it into an
Experiment Description (ED). An ED is a file/script that is supplied as an 
input to the Experiment Controller (EC). It contains a detailed description
of the resources involved in an experiment and the sets of actions to perform 
in order to execute that experiment. An ED is written using the
OMF Experiment Description Language (OEDL), which is based on Ruby syntax.

The ED describing this simple “Hello World” wireless experiment is {file:doc/tutorials/experiment02.rb experiment02.rb}:

    <code class="ruby">
    #Welcome to experiment 02: 'Hello World' Wireless
    #This script creates a simple wireless networking experiment

    #Section 1
    #Define otr2 application file-paths
    #Define experiment parameters and measurement points

    defApplication('otr2') do |a|
        
        #Application description and binary path
        a.binary_path = "/usr/bin/otr2"
        a.description = "otr is a configurable traffic sink that recieves packet streams"
        
        #Define configurable parameters of otr2
        a.defProperty('udp_local_host', 'IP address of this Destination node', '--udp:local_host', {:type => :string, :dynamic => false})
        a.defProperty('udp_local_port', 'Receiving Port of this Destination node', '--udp:local_port', {:type => :integer, :dynamic => false})
        a.defMeasurement('udp_in') do |m|
            m.defMetric('ts',:float)
            m.defMetric('flow_id',:long)
            m.defMetric('seq_no',:long)
            m.defMetric('pkt_length',:long)
            m.defMetric('dst_host',:string)
            m.defMetric('dst_port',:long)
        end
    end

    #Define otg2 application file-paths
    #Define experiment parameters and measurement points
    defApplication('otg2') do |a|
        
        #Application description and binary path
        a.binary_path = "/usr/bin/otg2"
        a.description = "otg is a configurable traffic generator that sends packet streams"
        
        #Define configurable parameters of otg2
        a.defProperty('generator', 'Type of packet generator to use (cbr or expo)', '-g', {:type => :string, :dynamic => false})
        a.defProperty('udp_broadcast', 'Broadcast', '--udp:broadcast', {:type => :integer, :dynamic => false})
        a.defProperty('udp_dst_host', 'IP address of the Destination', '--udp:dst_host', {:type => :string, :dynamic => false})
        a.defProperty('udp_dst_port', 'Destination Port to send to', '--udp:dst_port', {:type => :integer, :dynamic => false})
        a.defProperty('udp_local_host', 'IP address of this Source node', '--udp:local_host', {:type => :string, :dynamic => false})
        a.defProperty('udp_local_port', 'Local Port of this source node', '--udp:local_port', {:type => :integer, :dynamic => false})
        a.defProperty("cbr_size", "Size of packet [bytes]", '--cbr:size', {:dynamic => true, :type => :integer})
        a.defProperty("cbr_rate", "Data rate of the flow [kbps]", '--cbr:rate', {:dynamic => true, :type => :integer})
        a.defProperty("exp_size", "Size of packet [bytes]", '--exp:size', {:dynamic => true, :type => :integer})
        a.defProperty("exp_rate", "Data rate of the flow [kbps]", '--exp:rate', {:dynamic => true, :type => :integer})
        a.defProperty("exp_ontime", "Average length of burst [msec]", '--exp:ontime', {:dynamic => true, :type => :integer})
        a.defProperty("exp_offtime", "Average length of idle time [msec]", '--exp:offtime', {:dynamic => true, :type => :integer})
        
        #Define measurement points that application will output
        a.defMeasurement('udp_out') do |m|
            m.defMetric('ts',:float)
            m.defMetric('flow_id',:long)
            m.defMetric('seq_no',:long)
            m.defMetric('pkt_length',:long)
            m.defMetric('dst_host',:string)
            m.defMetric('dst_port',:long)
            
        end
    end

    #Section 2
    #Define resources and nodes used by application

    #Define configuration of wireless 'sender'
    defGroup('Sender', "omf.nicta.node9") do |node|
        node.addApplication("otg2") do |app|
            app.setProperty('udp_local_host', '192.168.0.2')
            app.setProperty('udp_dst_host', '192.168.0.3')
            app.setProperty('udp_dst_port', 3000)
            app.measure('udp_out', :interval => 3)
        end
        
        node.net.w0.mode = "adhoc"
        node.net.w0.type = 'g'
        node.net.w0.channel = "6"
        node.net.w0.essid = "Hello World!"
        node.net.w0.ip = "192.168.0.2/24"
    end

    #Define configuration of wireless 'reciever'
    defGroup('Receiver', "omf.nicta.node10") do |node|
        node.addApplication("otr2") do |app|
            app.setProperty('udp_local_host', '192.168.0.3')
            app.setProperty('udp_local_port', 3000)
            app.measure('udp_in', :interval => 3)
        end
        
        node.net.w0.mode = "adhoc"
        node.net.w0.type = 'g'
        node.net.w0.channel = "6"
        node.net.w0.essid = "Hello World! Experiment02"
        node.net.w0.ip = "192.168.0.3/24"
    end

    #Section 3
    #Execution of application events
    onEvent(:ALL_UP_AND_INSTALLED) do |event|
        info "Starting WiFi OMF6 Experiment events"
        
        after 10 do
            allGroups.startApplications
            info "All Applications have started..."
            
        end
        after 40 do
            allGroups.stopApplications
            info "Applications are stopping... Experiment Complete."
            Experiment.done
        end
    end    
</code>

### 3a) Application Definition

OMF entities need to learn about the applications that will be used in the
experiment, such as where their executable resides, what configurable
parameters they have, or what measurements they can collect. All this
information is provided in the block of instructions defined between the
'do' and 'end' markers following the 'defApplication' commands:

	defApplication('otr2') do |a|
	  a.description = '...'
	  #...
	end

- first we provide the path for the application itself

        app.binary_path = '/usr/bin/otr2'

- then we define all the configurable command line parameters of the
application that we would like to configure within OMF. This is done using
the 'defProperty' command for each parameter. Type 'string' means that the value
passed to this parameter is a string, `:dynamic => false` means that this parameter value
cannot be updated at runtime.

		a.defProperty('udp_local_host', 'IP address of this Destination node', '--udp:local_host', {:type => :string, :dynamic => false})
		a.defProperty('udp_local_port', 'Receiving Port of this Destination node', '--udp:local_port', {:type => :integer, :dynamic => false})

- finally we define all the OML measurement points (MP) that this application
has (if any). If that MP (`udp_in`) is activated, it will send a
series of 6 tuple samples to the OML server

		a.defMeasurement('udp_in') do |m|
		  m.defMetric('ts',:float)
		  m.defMetric('flow_id',:long)
		  m.defMetric('seq_no',:long)
		  m.defMetric('pkt_length',:long)
		  m.defMetric('dst_host',:string)
		  m.defMetric('dst_port',:long)
		end

- the same exercise is done for the OTG application, which has a few more parameters than OTR

It is important to note that this Application Definition is only informative
for OMF, i.e. it is only a description of what the real application has to
offer. The application itself must already implement the parameters
and measurement points that you define in this App definition. The man
page usually contains a complete list of supported parameters.

Many OML-enabled applications already ship with an OMF application definition.

### 3b) Group/Resource Definition

Within an OMF experiment, resources may be grouped together within named
Groups. A named Group can be itself viewed as a resource holding other
resources. A given resource can belong to multiple groups at the same time, and
a group itself may be part of another group.
In this example, we define a two group named 'Sender' and 'Receiver', which contain a
single resource each.

> **IMPORTANT** When running this experiment using your own resources and testbed
please change `omf.nicta.node9` and `omf.nicta.node10` in the ED to the actual name of your
own resource.

    defGroup('Sender', 'omf.nicta.node9') do |g|
      #...
    end

When we define a group, we can associate configuration settings and
applications with all members of that group. In this example, we only associate 
one application to each of the single members of the 'Sender' and 'Receiver' groups. This is done using
the 'addApplication' command. Furthermore, when associating an application
with a group, we can provide a given configuration for that application in the
specific context of that group. This is achieved inside the block of
instructions following the 'addApplication' command. For the sender, we

- configure the 'udp_local_host' parameter to the node's own IP address
- configure the 'udp_dst_host' parameter to the other node's IP address
- configure the 'udp_dst_port' parameter to the port number where OTR listens on the other node

For the receiver, we

- configure the 'udp_local_host' parameter to the node's own IP address
- configure the 'udp_local_port' parameter to the port number where OTR should listen for traffic

For both groups, we

- request the application to collect the measurement samples that its measurement point will produce at an interval of 3 seconds

In OEDL it looks like this:

	node.addApplication("otg2") do |app|
		app.setProperty('udp_local_host', '192.168.0.2')
		app.setProperty('udp_dst_host', '192.168.0.3')
		app.setProperty('udp_dst_port', 3000)
		app.measure('udp_out', :interval => 3)
	end
	# ...
	node.addApplication("otr2") do |app|
		app.setProperty('udp_local_host', '192.168.0.3')
		app.setProperty('udp_local_port', 3000)
		app.measure('udp_in', :interval => 3)
	end

### 3c) Event Definition

Experiments in OMF are fully event driven. This means that to perform an
experiment, you as the experimenter have to define:

- events that may be triggered during the course of the experiment execution
- tasks to perform when each of these events are triggered

For example, your experiment might involve 2 events:

- *when my PC node is ready* and
- *when my application has finished running*

You would then associate the following tasks to each of those events:

- *configure the application on my PC node and start it*
- *do some cleanup, send me an email, and switch off my PC node*

For convenience, the OMF EC already comes with a set of common
events that are useful for many experiments. Some of these default events are:

- `:ALL_UP` - triggered when all resources in all the defined groups have
contacted the EC and are ready to engage in the experiment
- `:ALL_INTERFACE_UP` - triggered when all the network interfaces which were
configured within this experiment are in their 'up' (active) state
- `:ALL_UP_AND_INSTALLED` - triggered when `:ALL_UP` fires and the applications associated
with the resources are installed and ready to be started

For these default events, there is no need for you to redefine them
in your ED. The only thing that you have to do is define the set of tasks
you would like to perform when one of these events triggers. In this tutorial
we define a set of tasks to perform when the *:ALL_UP_AND_INSTALLED* event
is fired, using the 'onEvent' method:

    onEvent(:ALL_UP_AND_INSTALLED) do |event|
      #...
    end

The set of consecutive tasks that we define are:

- print some information message (using the 'info' command)
- after 10 seconds, start all the applications associated with all the groups (using the 'startApplications' method call on the 'allGroups' accessor)
- after 40 seconds, stop all the applications associated with all the groups and end the experiment

In OEDL, this translates to:

	onEvent(:ALL_UP_AND_INSTALLED) do |event|
	  info "This is my first OMF experiment"
	  after 10 do
	    allGroups.startApplications
	    info "All my Applications are started now..."
	  end
	  after 40 do
	    allGroups.stopApplications
	    info "All my Applications are stopped now."
	    Experiment.done
	  end
	end

As OMF experiments are fully event-driven, you have to explicitly tell the OMF
EC when to terminate the experiment. Otherwise, it will keep waiting for more
events to happen, and of course if nothing else changes in your experiment after
that, you may never see the EC quit. To explicitly tell the EC
to terminate the experiment, we use the following command which can be placed
in any event-tasks definition as you design your experiment:

      Experiment.done

If you would like more information on defining your own custom events, please
read our [User-Defined Event Tutorial (coming soon)]()

4. Running the “Hello World” Experiment
---------------------------------------

### 4a) How do you run it?

Assuming that you have checked all the prerequisite points in the above
section 2, to run your experiment you have to:

- save the experiment description in a file on your computer, thus either
  - cut-and-paste the above ED listing into a new file named 'tutorial01.rb'
  - download the ED directly: {file:doc/tutorials/tutorial01.rb tutorial01.rb}

- open a terminal and navigate to the directory where you saved that file
- start the EC software and tell it to execute the experiment described in your ED file, using the command line:

        omf_ec -u xmpp://my_xmpp.com exec --oml_uri tcp:my_oml.com:port tutorial01.rb

  - **replace** *my_xmpp.com* with the hostname of the
  XMPP server that is used to communicate with the resources. This is usually provided by your testbed.
  - **replace** *tcp:my_oml.com:port* with the hostname/IP and port of the OML2 server
  which will collect the experiment's measurement. This is usually provided by your testbed.

- So **only for example**, if you are using the XMPP server at 'my_xmpp.com' 
and you want to use the OML2 server at 'my_oml.com with port
3003 to collect the measurements from your experiment, then you would use the
command line:

        omf_ec -u xmpp://my_xmpp.com exec --oml_uri tcp:my_oml.com:3003 tutorial01.rb

If you would like to know more about the other options of the OMF EC software, please run:

    omf_ec help
    omf_ec help exec

### 4b) What will happen next?

When running the EC with the above command, you should see an output
similar to this:

	18:15:35 INFO  XMPP::Communicator: Connecting to 'norbit.npc.nicta.com.au' ...
	18:15:35 INFO  Object: Connected
	18:15:35 INFO  Object: Start experiment: 2013-04-18T08:15:35Z
	18:15:35 INFO  OmfEc: Subscribed to b08025bb-6021-401b-bb55-c80c8a4fc99a
	18:15:35 INFO  OmfEc: Subscribed to omf.nicta.node9
	18:15:35 INFO  OmfEc: Config omf.nicta.node9 to join Sender
	18:15:35 INFO  OmfEc: Subscribed to 062ed093-c11e-4039-8b4c-35d007aabc4e
	18:15:35 INFO  OmfEc: Subscribed to omf.nicta.node10
	18:15:35 INFO  OmfEc: Config omf.nicta.node10 to join Receiver
	18:15:35 INFO  OmfEc: Newly discovered resource >> omf.nicta.node9
	18:15:35 INFO  OmfEc: Newly discovered resource >> omf.nicta.node10
	18:15:35 INFO  OmfEc: Event triggered: 'ALL_UP'
	18:15:35 INFO  OmfEc: Subscribed to b08025bb-6021-401b-bb55-c80c8a4fc99a_wlan
	18:15:35 INFO  OmfEc: Subscribed to b08025bb-6021-401b-bb55-c80c8a4fc99a_application
	18:15:35 INFO  OmfEc: Subscribed to 062ed093-c11e-4039-8b4c-35d007aabc4e_application
	18:15:35 INFO  OmfEc: Subscribed to 062ed093-c11e-4039-8b4c-35d007aabc4e_wlan
	18:15:39 INFO  OmfEc: Newly discovered resource >> bb4c0edf-7167-4c64-9cbe-c9681332749f
	18:15:40 INFO  OmfEc: Newly discovered resource >> bbfba05b-c8ed-458b-8841-c6694135e99e
	18:15:42 INFO  OmfEc: Newly discovered resource >> 65e5bf73-4085-4d46-b790-2c2e4b719b70
	18:15:42 INFO  OmfEc: Event triggered: 'ALL_UP_AND_INSTALLED'
	18:15:42 INFO  Object: This is my first OMF experiment
	18:15:42 INFO  OmfEc: Newly discovered resource >> 4b8644d3-9a45-4091-a147-651c55f4f15b
	18:15:52 INFO  Object: All my Applications are started now...
	18:15:52 INFO  OmfEc: APP_EVENT STARTED from app otg2_cxt_0 - msg: env -i /usr/bin/otg2 --udp:dst_host 192.168.0.3 --udp:dst_port 3000 --udp:local_host 192.168.0.2 --oml-config /tmp/65e5bf73-4085-4d46-b790-2c2e4b719b70-1366272953.xml
	18:15:53 INFO  OmfEc: APP_EVENT STARTED from app otr2_cxt_0 - msg: env -i /usr/bin/otr2 --udp:local_host 192.168.0.3 --udp:local_port 3000 --oml-config /tmp/bb4c0edf-7167-4c64-9cbe-c9681332749f-1366272953.xml
	18:15:53 INFO  OmfEc: APP_EVENT STDERR from app otr2_cxt_0 - msg: INFO   OTG2 Traffic Sink 2.9.0-dirty
	18:15:53 INFO  OmfEc: APP_EVENT STDERR from app otg2_cxt_0 - msg: INFO   OTG2 Traffic Generator 2.9.0-dirty
	18:15:54 INFO  OmfEc: APP_EVENT STDERR from app otg2_cxt_0 - msg: INFO   OML Client V2.9.0 [Protocol V3] Copyright 2007-2012, NICTA
	18:15:54 INFO  OmfEc: APP_EVENT STDERR from app otr2_cxt_0 - msg: INFO   OML Client V2.9.0 [Protocol V3] Copyright 2007-2012, NICTA
	18:15:56 INFO  OmfEc: APP_EVENT STDERR from app otg2_cxt_0 - msg: INFO   Net_stream: attempting to connect to server at tcp://norbit.npc.nicta.com.au:3003
	18:15:56 INFO  OmfEc: APP_EVENT STDERR from app otr2_cxt_0 - msg: INFO   Net_stream: attempting to connect to server at tcp://norbit.npc.nicta.com.au:3003
	18:16:22 INFO  Object: All my Applications are stopped now.
	18:16:22 INFO  OmfEc: Exit in up to 15 seconds...
	18:16:22 INFO  OmfEc: APP_EVENT DONE.OK from app otr2_cxt_0 - msg: status: pid 1469 exit 0
	18:16:22 INFO  OmfEc: APP_EVENT DONE.OK from app otg2_cxt_0 - msg: status: pid 1705 exit 0
	18:16:32 INFO  OmfEc: Release applications and network interfaces
	18:16:37 INFO  XMPP::Communicator: Disconnecting ...

The above screen output was obtained when running the EC on the NICTA testbed,
with the experiment described in {file:doc/tutorials/tutorial01.rb tutorial01.rb}
and using the resources named 'omf.nicta.node9' and 'omf.nicta.node10'.

### 4c) What does that screen output mean?

Here is a brief explanation of the output messages displayed by the EC above:

- First the EC provides us with some information about the parameters of
this experiment (Experiment ID, XMPP server used, resources used,...):

		18:15:35 INFO  XMPP::Communicator: Connecting to 'norbit.npc.nicta.com.au' ...
		18:15:35 INFO  Object: Connected
		18:15:35 INFO  Object: Start experiment: 2013-04-18T08:15:35Z
	        ...
		18:15:35 INFO  OmfEc: Subscribed to omf.nicta.node9
		18:15:35 INFO  OmfEc: Config omf.nicta.node9 to join Sender

- It also provides us some feedback about its communication with the XMPP
server and other OMF entities:

		...
		18:15:35 INFO  OmfEc: Subscribed to b08025bb-6021-401b-bb55-c80c8a4fc99a
		18:15:35 INFO  OmfEc: Subscribed to omf.nicta.node9
		...
		18:15:35 INFO  OmfEc: Subscribed to 062ed093-c11e-4039-8b4c-35d007aabc4e
		18:15:35 INFO  OmfEc: Subscribed to omf.nicta.node10
		...
		18:15:35 INFO  OmfEc: Newly discovered resource >> omf.nicta.node9
		18:15:35 INFO  OmfEc: Newly discovered resource >> omf.nicta.node10
		...
		18:15:35 INFO  OmfEc: Subscribed to b08025bb-6021-401b-bb55-c80c8a4fc99a_wlan
		18:15:35 INFO  OmfEc: Subscribed to b08025bb-6021-401b-bb55-c80c8a4fc99a_application
		18:15:35 INFO  OmfEc: Subscribed to 062ed093-c11e-4039-8b4c-35d007aabc4e_application
		18:15:35 INFO  OmfEc: Subscribed to 062ed093-c11e-4039-8b4c-35d007aabc4e_wlan
		18:15:39 INFO  OmfEc: Newly discovered resource >> bb4c0edf-7167-4c64-9cbe-c9681332749f
		18:15:40 INFO  OmfEc: Newly discovered resource >> bbfba05b-c8ed-458b-8841-c6694135e99e
		18:15:42 INFO  OmfEc: Newly discovered resource >> 65e5bf73-4085-4d46-b790-2c2e4b719b70
		...
		18:16:37 INFO  XMPP::Communicator: Disconnecting ...

- Then it also informs us when a defined event has been triggered:

        ...
        18:15:35 INFO  OmfEc: Event triggered: 'ALL_UP'
        ...
        18:15:42 INFO  OmfEc: Event triggered: 'ALL_UP_AND_INSTALLED'
        ...

- Finally, when an event is triggered (such as ALL_UP_AND_INSTALLED), it
informs us about the tasks executed for that event, and their
results/outputs:

        ...
		18:15:42 INFO  OmfEc: Event triggered: 'ALL_UP_AND_INSTALLED'
		18:15:42 INFO  Object: This is my first OMF experiment
		18:15:42 INFO  OmfEc: Newly discovered resource >> 4b8644d3-9a45-4091-a147-651c55f4f15b
		18:15:52 INFO  Object: All my Applications are started now...
		18:15:52 INFO  OmfEc: APP_EVENT STARTED from app otg2_cxt_0 - msg: env -i /usr/bin/otg2 --udp:dst_host 192.168.0.3 --udp:dst_port 3000 --udp:local_host 192.168.0.2 --oml-config /tmp/65e5bf73-4085-4d46-b790-2c2e4b719b70-1366272953.xml
		18:15:53 INFO  OmfEc: APP_EVENT STARTED from app otr2_cxt_0 - msg: env -i /usr/bin/otr2 --udp:local_host 192.168.0.3 --udp:local_port 3000 --oml-config /tmp/bb4c0edf-7167-4c64-9cbe-c9681332749f-1366272953.xml
		18:15:53 INFO  OmfEc: APP_EVENT STDERR from app otr2_cxt_0 - msg: INFO   OTG2 Traffic Sink 2.9.0-dirty
		18:15:53 INFO  OmfEc: APP_EVENT STDERR from app otg2_cxt_0 - msg: INFO   OTG2 Traffic Generator 2.9.0-dirty
		18:15:54 INFO  OmfEc: APP_EVENT STDERR from app otg2_cxt_0 - msg: INFO   OML Client V2.9.0 [Protocol V3] Copyright 2007-2012, NICTA
		18:15:54 INFO  OmfEc: APP_EVENT STDERR from app otr2_cxt_0 - msg: INFO   OML Client V2.9.0 [Protocol V3] Copyright 2007-2012, NICTA
		18:15:56 INFO  OmfEc: APP_EVENT STDERR from app otg2_cxt_0 - msg: INFO   Net_stream: attempting to connect to server at tcp://norbit.npc.nicta.com.au:3003
		18:15:56 INFO  OmfEc: APP_EVENT STDERR from app otr2_cxt_0 - msg: INFO   Net_stream: attempting to connect to server at tcp://norbit.npc.nicta.com.au:3003
		18:16:22 INFO  Object: All my Applications are stopped now.
		18:16:22 INFO  OmfEc: Exit in up to 15 seconds...
		18:16:22 INFO  OmfEc: APP_EVENT DONE.OK from app otr2_cxt_0 - msg: status: pid 1469 exit 0
		18:16:22 INFO  OmfEc: APP_EVENT DONE.OK from app otg2_cxt_0 - msg: status: pid 1705 exit 0
        ...

5. Accessing the Results from the Experiment
--------------------------------------------

During the execution of the experiment, the OTG and OTR applications
have collected some measurements, as we requested them to do, and sent them to
the OML2 server that we selected (the --oml-uri option of the EC command line).

### How do you access the measurements?

This depends on how the OML2 server which received your measurements is set up. It can be
configured to use either a SQLite3 or a PostgreSQL database backend, moreover additional tools
may have been put in place by your testbed operator to facilitate the access to the result database.

For a detailed description of OML2 server's configuration modes, please
refer to [the OML2 Documentation](http://mytestbed.net/projects/oml/wiki)

Here is a short example on how you would access your data on the NICTA testbed:

- assuming that the OML2 server was running on the host 'my_oml.com' and was configured to use SQLite3 and stores the result databases in `/var/lib/oml2/`
- first you need to get access to a console on that host, assuming you have an account 'foo' with the password 'bar':

        ssh foo@my_oml.com  # then enter the password 'bar'

- then you use the sqlite3 command to dump your experiment database, which
is in the file `/var/lib/oml2/your_experiment_id.sq3`. Thus assuming the experiment ID above
(2013-04-18T08:15:35Z):

        sqlite3 /var/lib/oml2/2013-04-18T08:15:35Z.sq3 .dump

This will dump the database contents in SQL format to the console. For more information on SQLite3, please refer to its [documentation website]
(http://www.sqlite.org/docs.html)

### How do I display my measurements in some nice graphs?

We have a separate tool named [**omf_web**]
(https://github.com/mytestbed/omf_web) which allows you to build
some custom visualisation of the data collected within your experiment and
display them within your web browser. For more information on how to
use that tool, please refer to the [omf_web documentation]
(https://github.com/mytestbed/omf_web)

6. What should I do next?
-------------------------

We will soon release more tutorials on how to use all the features of OMF6
from the experimenter's perspective.

In the meantime, you may have a look at the OMF 5.4 documentation, which
will not be completely accurate and applicable to OMF 6, but would still give you
some ideas of the OMF features available for experimenters.

Finally, if you have any questions on how to use OMF 6 or any problems running
this 'Hello World' wireless tutorial, please join the [OMF Mailing List]
(https://lists.nicta.com.au/wws/info/omf-user) and post your questions there.