# Experiment 03


3. Dynamic Properties *Experiment Tutorial*
---------------------------

If you are a new OMF user (i.e. an experimenter), you may want to read
the [OMF sytem overview]
(http://omf.mytestbed.net/projects/omf/wiki/An_Introduction_to_OMF)
or the [experimenter overview] 
(http://omf.mytestbed.net/projects/omf/wiki/UsageOverview)
pages

**Objectives**

After reading this tutorial you should be able to:

-   This tutorial shows you how to define and use Experiment Properties
    within your experiment.

-   Experiment Properties allows you to:
    -   pass parameters to your experiment when it starts its execution,
        via the use of options to the `omf-<version> exec` command line
    -   change values of these parameters dynamically, while your
        experiment is running


**Experiment Scenario**

-   Here we are using the same simple scenario as in {file:doc/tutorials/experiment03.rb Experiment02.mkd}

-   We will modify this example, to allow us to:
    -   define some of the attributes of this experiment as parameters,
        aka *properties*
    -   assign values to these *properties*
    -   change these values at runtime, i.e. while the experiment is
        running
        
        
2. Prerequisites
--------------------------------------------------------------
### 2a) Accessing/Provisioning Resources

This tutorial assumes that you are using OMF-enabled resources with WLAN interfaces, which are
provided by either a NICTA or ORBIT testbed. This section briefly describes
the steps to reserve and provision resources on these testbeds.

You can complete this tutorial with OMF-enabled resources which are provided
by other testbeds. In such a case, please refer to these testbeds' specific 
documentation for instructions on how to reserve/provision their resources with OMF.

Alternatively you may also decide to install OMF on your own testbed, if
so then please follow the instructions for testbed operators on our
{file:doc/INSTALLATION.mkd OMF 6 Installation Guide}. Remember to install 802.11g compatible
wireless cards (we use cards that support the ath5k or ath9k driver).

**Accessing Resources at NICTA/ORBIT**

- Are you using a testbed at NICTA? Please refer to the 
[OMF at NICTA Getting Started page]
(http://mytestbed.net/projects/omf/wiki/OMFatNICTA)
- Are you using a testbed at ORBIT? Please refer to the 
[OMF at ORBIT Getting Started page]
(http://mytestbed.net/projects/omf/wiki/OMFatWINLAB)

**Provisioning Resources at NICTA/ORBIT**

The current version of OMF 6 does not yet have a complete process in place
to provision a PC-type resource at NICTA or ORBIT. Such feature will be added
in the next release. Provisioning in the context of PC-type resources at NICTA
and ORBIT means having a specific user disk image loaded on the resource.

In the meantime, please use the method described on 
[the OMF 5.4 imaging page]
(http://mytestbed.net/projects/omf54/wiki/BasicTutorialStage7-5-4)
for instruction on how to provision/image resources at NICTA or ORBIT.

Using these instructions, make sure that you load a disk image onto your resources
that contains OMF 6 (normally the latest baseline.ndz image will do).

### 2b) Installing the Experiment Controller


The OMF Experiment Controller (EC) is the software that will interpret
your Experiment Description (ED) and interact with the resources to 
execute it accordingly. You can either:

- use a pre-installed EC on the consoles of any NICTA or ORBIT testbeds
- or install your own EC on your machine, by following the instructions
for users on our {file:doc/INSTALLATION.mkd OMF 6 Installation Guide}

This tutorial assumes the latter, i.e. you have installed an EC on your
machine and will use it to orchestrate your experiment


3. Developing the Experiment Description (ED)
-----------------------------------------------

The ED describing this simple “Hello World” wireless experiment is {file:doc/tutorials/experiment03.rb experiment03.rb}:

<pre class="code ruby"><code class="ruby">    
#Welcome to the Dynamic Properties ED
#This ED allows the experimenter to pass parameters to the experiment and change them at run-time

###############################################################################################
###############################################################################################
#Section 1
#Define application file-paths
#Define experiment parameters and measurement points

defApplication('otg2') do |app|
    
    #Application description and binary path
    app.description = 'otg2 is a configurable traffic generator'
    app.binary_path = '/usr/bin/otg2'
    
    #Configurable parameters of Experiment
    app.defProperty('udp_local_host', 'IP address of this Source node', '--udp:local_host', {:type => :string, :dynamic => false})
    app.defProperty('udp_dst_host', 'IP address of the Destination', '--udp:dst_host', {:type => :string, :dynamic => false})
    app.defProperty('udp_dst_port', 'Destination Port to send to', '--udp:dst_port', {:type => :integer, :dynamic => false})
    app.defProperty("cbr_size", "Size of packet [bytes]", '--cbr:size', {:dynamic => true, :type => :integer})
    app.defProperty("cbr_rate", "Data rate of the flow [kbps]", '--cbr:rate', {:dynamic => true, :type => :integer})
    
    #Define measurement points that application will output
    app.defMeasurement('udp_out') do |m|
        
    end
end

defApplication('otr2') do |app|
    
    #Application description and binary path
    app.description = 'otr2 is a configurable traffic reciever'
    app.binary_path = '/usr/bin/otr2'
    
    #Configurable parameters of Experiment
    app.defProperty('udp_local_host', 'IP address of this Destination node', '--udp:local_host', {:type => :string, :dynamic => false})
    app.defProperty('udp_local_port', 'Receiving Port of this Destination node', '--udp:local_port', {:type => :integer, :dynamic => false})
    
    #Define measurement points that application will output
    app.defMeasurement('udp_in') do |m|

    end
end
###############################################################################################
###############################################################################################
#Define dynamic properties to be changed by experimenter

defProperty('theSender', 'omf.nicta.node9', "ID of sender node")
defProperty('theReceiver', 'omf.nicta.node10', "ID of receiver node")
defProperty('packetsize', 128, "Packet size (byte) from the sender node")
defProperty('bitrate', 2048, "Bitrate (bit/s) from the sender node")
defProperty('runtime', 40, "Time in second for the experiment is to run")
defProperty('wifiType', "g", "The type of WIFI to use in this experiment")
defProperty('channel', '6', "The WIFI channel to use in this experiment")
defProperty('netid', "Hello World! Experiment03", "The ESSID to use in this experiment")

###############################################################################################
###############################################################################################
#Section 2
#Define resources and nodes used by application

#Create the group 'Sender' associated to dynamic property
defGroup('Sender',property.theSender) do |node|
    
    #Associate application to group (?)
    node.addApplication("otg2") do |app|
        
        #Configure aplication
        app.setProperty('udp_local_host', '192.168.0.2')
        app.setProperty('udp_dst_host', '192.168.0.3')
        app.setProperty('udp_dst_port', 3000)
        app.setProperty('cbr_size', property.packetsize)
        app.setProperty('cbr_rate', property.bitrate * 2)
        
        #Request application to collect measurement point output data
        app.measure('udp_out', :samples => 1)
        
    end
    node.net.w0.mode = "adhoc"
    node.net.w0.type = property.wifiType
    node.net.w0.channel = property.channel
    node.net.w0.essid = "foo"+property.netid
    node.net.w0.ip = "192.168.0.2/24"
end

#Create the group 'Reciever' associated to dynamic property
defGroup('Reciever',property.theReceiver) do |node|
    
    #Associate application to group (?)
    node.addApplication("otr2") do |app|
        
        #Configure application
        app.setProperty('udp_local_host', '192.168.0.3')
        app.setProperty('udp_local_port', 3000)
        
        #Request application to collect measurement point output data
        app.measure('udp_in', :samples => 1)

    end
    node.net.w0.mode = "adhoc"
    node.net.w0.type = property.wifiType
    node.net.w0.channel = property.channel
    node.net.w0.essid = "foo"+property.netid
    node.net.w0.ip = "192.168.0.3/24"
end
###############################################################################################
###############################################################################################
#Section  3
#Execution of application events

onEvent(:ALL_UP_AND_INSTALLED) do |event|
    
    info "Starting dynamic properties ED..."
    wait 10
    
    allGroups.startApplications
    info "Applications have started..."
    
    wait property.runtime / 4
    property.packetsize = 256
    wait property.runtime / 4 *2
    property.packetsize = 512
    wait property.runtime / 4 *3
    property.packetsize = 1024
    wait property.runtime
    
    allGroups.stopApplications
    info "Applications are stopping... Experiment complete."
    Experiment.done
end
</code>
</pre>




4. Running the experiment
-------------------------

-   You should see an output similar to the following:

<!-- -->

    <code class="text">
     INFO NodeHandler: OMF Experiment Controller 5.4 (git 97ed1a2)
     INFO NodeHandler: Slice ID: default_slice (default)
     INFO NodeHandler: Experiment ID: default_slice-2013-03-06t16.52.50+11.00
     INFO NodeHandler: Message authentication is disabled
     INFO Experiment: load system:exp:stdlib
     INFO property.resetDelay: resetDelay = 210 (Fixnum)
     INFO property.resetTries: resetTries = 1 (Fixnum)
     INFO Experiment: load system:exp:eventlib
     INFO Experiment: load dynamic-properties.rb
     INFO property.theSender: theSender = "omf.nicta.node9" (String)
     INFO property.theReceiver: theReceiver = "omf.nicta.node10" (String)
     INFO property.packetsize: packetsize = 128 (Fixnum)
     INFO property.bitrate: bitrate = 2048 (Fixnum)
     INFO property.runtime: runtime = 40 (Fixnum)
     INFO property.wifiType: wifiType = "g" (String)
     INFO property.channel: channel = "6" (String)
     INFO property.netid: netid = "Hello World! Experiment03" (String)
     INFO Topology: Loading topology 'omf.nicta.node9'.
     INFO Topology: Loading topology 'omf.nicta.node10'.
     INFO Experiment: Switching ON resources which are OFF
     INFO omf.nicta.node9: Device 'net/w0' reported Not-Associated
     INFO ALL_UP_AND_INSTALLED: Event triggered. Starting the associated tasks.
     INFO exp: Starting dynamic properties ED...
     INFO exp: Request from Experiment Script: Wait for 10s....
     INFO omf.nicta.node10: Device 'net/w0' reported Not-Associated
     INFO omf.nicta.node9: Device 'net/w0' reported 46:32:28:8A:DA:DD
     INFO exp: Applications have started...
     INFO exp: Request from Experiment Script: Wait for 10s....
     INFO omf.nicta.node10: Device 'net/w0' reported 46:32:28:8A:DA:DD
     INFO property.packetsize: packetsize = 256 (Fixnum)
     INFO exp: Request from Experiment Script: Wait for 10s....
     INFO property.packetsize: packetsize = 512 (Fixnum)
     INFO exp: Request from Experiment Script: Wait for 10s....
     INFO property.packetsize: packetsize = 1024 (Fixnum)
     INFO exp: Request from Experiment Script: Wait for 10s....
     INFO exp: Applications are stopping... Experiment complete.        
     INFO EXPERIMENT_DONE: Event triggered. Starting the associated tasks.
     INFO NodeHandler: 
     INFO NodeHandler: Shutting down experiment, please wait...
     INFO NodeHandler: 
     INFO run: Experiment default_slice-2013-03-06t16.52.50+11.00 finished after 1:3
    </code>

5. The Results
--------------

During the execution of the experiment, the OTG and OTR applications
have collected some measurements, as we requested them to do, and sent them to
the OML2 server that we selected (the --oml-uri option of the EC command line).

### How do you access the measurements?

This depends on how the OML2 server which received your measurements is set up. It can be
configured to use either a SQLite3 or a PostgreSQL database backend, moreover additional tools
may have been put in place by your testbed operator to facilitate the access to the result database.

For a detailed description of OML2 server's configuration modes, please
refer to [the OML2 Documentation](http://mytestbed.net/projects/oml/wiki)

Here is a short example on how you would access your data on the NICTA testbed:

- assuming that the OML2 server was running on the host 'my_oml.com' and was configured to use SQLite3 and stores the result databases in `/var/lib/oml2/`
- first you need to get access to a console on that host, assuming you have an account 'foo' with the password 'bar':

        ssh foo@my_oml.com  # then enter the password 'bar'

- then you use the sqlite3 command to dump your experiment database, which
is in the file `/var/lib/oml2/your_experiment_id.sq3`. Thus assuming the experiment ID above
(2013-03-06t16.52.50+11.00):

        sqlite3 /var/lib/oml2/2013-03-06t16.52.50+11.00.sq3 .dump

This will dump the database contents in SQL format to the console. For more information on SQLite3, please refer to its [documentation website]
(http://www.sqlite.org/docs.html)

### How do I display my measurements in some nice graphs?

We have a separate tool named [**omf_web**]
(https://github.com/mytestbed/omf_web) which allows you to build
some custom visualisation of the data collected within your experiment and
display them within your web browser. For more information on how to
use that tool, please refer to the [omf_web documentation]
(https://github.com/mytestbed/omf_web)    

6. What should I do next?
-------------------------

We will soon release more tutorials on how to use all the features of OMF6
from the experimenter's perspective.

In the meantime, you may have a look at the OMF 5.4 documentation, which
will not be completely accurate and applicable to OMF 6, but would still give you
some ideas of the OMF features available for experimenters.

Finally, if you have any questions on how to use OMF 6 or any problems running
this 'Hello World' wireless tutorial, please join the [OMF Mailing List]
(https://lists.nicta.com.au/wws/info/omf-user) and post your questions there.