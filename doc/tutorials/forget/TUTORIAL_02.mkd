1. “Hello World” - Wired
------------------------

This tutorial presents a simple example, which shows you all the basic
steps to quickly develop, run, and access the result of an experiment
with OMF. Subsequent tutorials will build on this one to show you how to
use other OMF features.

If you are a new OMF users, you may want to read
[[An\_Introduction\_to\_OMF|the short OMF System Overview]] and/or the
[[UsageOverview|Experiment Life-cycle Overview]]

**Notation**

<version> Full version number. E.g. 5.3, 5.4\
<version_compact> Naming convention used in port number. E.g. OMF has
inventory service running at port 50<version_compact>, so OMF 5.4 uses
port 5054

**Experiment Scenario:**

Figure 1 shows the simple experiment scenario, which we will use as the
example for this basic tutorial.\
![](/attachments/download/358)\
Figure 1. Simple experiment scenario

-   This experiment involves two PC-based nodes connected by a wired
    LAN, i.e. Node 1 and Node 2
-   Node 1 is running a simple UDP traffic generator application (OTG2)
-   Node 2 is running a simple traffic receiver application (OTR2)
-   Node 1 is the “Sender” and will generate and send traffic to the
    “Receiver” node 2

Note: At NICTA and WINLAB, these 2 applications (OTG2 & OTR2) are
already pre-installed on the default baseline disk image for the
wireless nodes. If you are using another OMF testbeds, you can find and
install these applications from [the OML Application
pages](http://mytestbed.net/projects/show/omlapp).

2. Accessing and Reserving resources on an OMF-enabled testbed
--------------------------------------------------------------

This tutorial assumes that you are using either one of the NICTA
testbeds or one of the WINLAB ORBIT testbeds.

-   **Using a testbed at NICTA?** Please refer to the [[OMFatNICTA|OMF
    at NICTA Getting Starting page]]
-   **Using a testbed at WINLAB?** Please refer to the [[OMFatWINLAB|OMF
    at WINLAB Getting Starting page]]
-   Using another OMF-enabled testbed? Please refer to
    [[GettingStarted|the Getting Started page]] or contact the operator
    of your testbed
-   Using your own freshly installed testbed with OMF? Just replace host
    and username below with your specific details.

The OMF Experiment Controller (EC) is the software that will interpret
your Experiment Description (ED) and execute it accordingly. You can
either:

-   Use the already installed EC, which is present on the consoles of
    any of the NICTA or WINLAB testbeds
-   [[Installation\_Guide\_54|Download, install, and configure]] the EC
    on your own machine (Supported OS: Ubuntu/Debian, Fedora, Mac OSX)

This tutorial assumes the former, i.e. you will be using the EC
installed on your NICTA/WINLAB testbed’s console:

-   make a reservation for some resources on a testbed (see
    [[OMFatNICTA|OMF at NICTA]] or [[OMFatWINLAB|OMF at WINLAB]])

-   log on to the *console* machine corresponding to this testbed,
    during your reserved time slot:

<!-- -->

    Example at NICTA:
       ssh myUsername@norbit.npc.nicta.com.au
       password:

    Example at WINLAB:
       ssh myUsername@console.sb1.orbit-lab.org
       password:

-   If you cannot login, contact a testbed administrator [at
    NICTA](http://mytestbed.net/tab/show/omf) or [at
    WINLAB](http://www.orbit-lab.org/wiki/about/WhoToContact).

-   Install a *baseline* disk image on the 2 resources, which you have
    reserved and which we will use in this tutorial. Here we assume that
    these two nodes are: **`omf.nicta.node2`** and **`omf.nicta.node3`**
    (if you are using other nodes, replace these names accordingly).

<!-- -->

    omf-<version> load -t omf.nicta.node2,omf.nicta.node3 -i baseline.ndz

-   You should see something similar [[OutputLoad|to this output
    example]] on your screen.

-   You may also want to view [[ToolManPages|the manual pages for the
    “omf” command]], or read the [[BasicTutorialStage7-5-3|“How to load
    a disk image” tutorial]]

3. Developing the “Hello World” Experiment Description
------------------------------------------------------

To run an experiment with OMF, you need first to describe it into an
Experiment Description (ED) file. An Experiment Description (ED) is a
script that is supplied as an input to the OMF Experiment Controller
(EC). It contains detailed descriptions of the resources involved in an
experiment and the sets of actions to perform in order to realize that
experiment. An ED is written using the
[[The\_Experiment\_Controller\_API|OMF Experiment Description Language
(OEDL)]].

The ED describing this simple “Hello World” experiment is (download it
here: attachment:hello-world.rb):

```ruby

#Welcome to 'Hello World' Wired
#This script creates a simple wired networking experiment


#Section 1
#Define otg2 application
#Define experiment parameters and measurement points
defApplication('otg2') do |a|
    
    #Application description and binary path
    a.binary_path = "/usr/bin/otg2"
    a.description = "otg is a configurable traffic generator that sends packet streams"
    
    #Define configurable parameters of otg2
    a.defProperty('generator', 'Type of packet generator to use (cbr or expo)', '-g', {:type => :string, :dynamic => false})
    a.defProperty('udp_broadcast', 'Broadcast', '--udp:broadcast', {:type => :integer, :dynamic => false})
    a.defProperty('udp_dst_host', 'IP address of the Destination', '--udp:dst_host', {:type => :string, :dynamic => false})
    a.defProperty('udp_dst_port', 'Destination Port to send to', '--udp:dst_port', {:type => :integer, :dynamic => false})
    a.defProperty('udp_local_host', 'IP address of this Source node', '--udp:local_host', {:type => :string, :dynamic => false})
    a.defProperty('udp_local_port', 'Local Port of this source node', '--udp:local_port', {:type => :integer, :dynamic => false})
    a.defProperty("cbr_size", "Size of packet [bytes]", '--cbr:size', {:dynamic => true, :type => :integer})
    a.defProperty("cbr_rate", "Data rate of the flow [kbps]", '--cbr:rate', {:dynamic => true, :type => :integer})
    a.defProperty("exp_size", "Size of packet [bytes]", '--exp:size', {:dynamic => true, :type => :integer})
    a.defProperty("exp_rate", "Data rate of the flow [kbps]", '--exp:rate', {:dynamic => true, :type => :integer})
    a.defProperty("exp_ontime", "Average length of burst [msec]", '--exp:ontime', {:dynamic => true, :type => :integer})
    a.defProperty("exp_offtime", "Average length of idle time [msec]", '--exp:offtime', {:dynamic => true, :type => :integer})
    
    #Define measurement points that application will output
    a.defMeasurement('udp_out') do |m|
        m.defMetric('ts',:float)
        m.defMetric('flow_id',:long)
        m.defMetric('seq_no',:long)
        m.defMetric('dst_host',:string)
        m.defMetric('dst_port',:long)
        
    end
end


#Define otr2 application file-paths
#Define experiment parameters and measurement points
defApplication('otr2') do |a|
        
    #Application description and binary path
    a.binary_path = "/usr/bin/otr2"
    a.description = "otr is a configurable traffic sink that recieves packet streams"
    
    #Define configurable parameters of otr2
    a.defProperty('udp_local_host', 'IP address of this Destination node', '--udp:local_host', {:type => :string, :dynamic => false})
    a.defProperty('udp_local_port', 'Receiving Port of this Destination node', '--udp:local_port', {:type => :integer, :dynamic => false})
    a.defMeasurement('udp_in') do |m|
        m.defMetric('ts',:float)
        m.defMetric('flow_id',:long)
        m.defMetric('seq_no',:long)
        m.defMetric('pkt_length',:long)
        m.defMetric('dst_host',:string)
        m.defMetric('dst_port',:long)

    end
end

    

#Section 2
#Define recources and nodes used by application

#Define configuration of wired 'sender'
defGroup('Sender', "omf.nicta.node9") do |node|
    node.addApplication("otg2") do |app|
        app.setProperty('udp_local_host', '192.168.0.2')
            app.setProperty('udp_dst_host', '192.168.0.3')
            app.setProperty('udp_dst_port', 3000)
            app.measure('udp_out', :samples => 1)
        end
    
    node.net.e0.ip = "192.168.0.2/24"
end


#Define configuration of wired 'reciever'
defGroup('Receiver', "omf.nicta.node10") do |node|
    node.addApplication("otr2") do |app|
        app.setProperty('udp_local_host', '192.168.0.3')
            app.setProperty('udp_local_port', 3000)
            app.measure('udp_in', :samples => 1)
        end
    
    node.net.e0.ip = "192.168.0.3/24"
end


#Section  3
#Execution of application events
onEvent(:ALL_UP_AND_INSTALLED) do |event|
    info "Starting OMF6 Experiment events"
    
    
    after 10
        allGroups.startApplications
        info "All Applications have started..."
    end
    
    after 30
        allGroups.stopApplications
        info "Applications are stopping... Experiment Complete."
        Experiment.done
    
```


### 3.1 Resource Description and Configuration (Line 1 to 26)

-   **Line 1**: we define a new group of resources, called `Sender`.
    This group includes a unique node, which is identified by a unique
    id: `omf.nicta.node2`.

-   **Line 2-7**: we associate an existing application called
    `test:app:otg2` to this group. This application will be installed
    and run on each node of this group (here, only `omf.nicta.node2`).
    In this tutorial, this application is already installed on the
    baseline disk image, which you previously loaded on the node. This
    application is a simple traffic generator, which by default
    generates fixed-sized UDP packets at a constant bitrate.
    -   More precisely:
        -   Line 3: we set the parameter `udp:local_host` of the
            application to the IP address that we give to the
            experimental interface of `omf.nicta.node2` (i.e the sender)
        -   Line 4: we set the parameter `udp:dst_host` of the
            application to the IP address that we give to the
            experimental interface of `omf.nicta.node3` (i.e. the
            receiver)
        -   Line 5: we set the parameter `udp:dst_port` of the
            application to the port that node `omf.nicta.node3` will
            listen on
        -   Line 6: we request the collection of the measurements from
            the `udp_out` Measurement Point provided by the application,
            here we are collecting every produced samples (samples = 1)

-   **Line 8-12**: we configure some properties for this group, i.e. all
    the nodes in this group will share these properties (here, only node
    `omf.nicta.node2`)
    -   More precisely, we configure the first wired interface (named
        `e0`) of the node
        -   Line 8: the IP address of this interface is set to
            `192.168.0.2`
        -   **Important**:
            -   the resources on the NICTA and WINLAB testbeds all have
                a wired network interface dedicated to experimental use
                in addition to the wired interface used for control and
                measurement
            -   If you are using your own resources on your own
                OMF-enabled testbed, and each resource has only one
                wired interface that it shares between its experimental
                and control/measurement traffic, then you should not
                change the interface’s configuration here. Also you
                should set the correct corresponding IPs in Line 3 and
                4.

-   **Line 11-18**: we define a similar group, called `Receiver`, which
    will only include node `omf.nicta.node3` running the existing
    application `test:app:otr2`. This application is a simple traffic
    sink, which should also be installed on the baseline disk image.
    Similar to the previous OTG2 applications, we further set properties
    for OTR2, and request the data from the `udp_in` Measurement Points
    to be captured. We also configure the interface of the nodes in this
    group in a similar manner as for the `Sender` group.

-   **Note**:
    -   More details about how to define groups and topologies, or
        configure resources can be found on the [[other tutorial
        pages]].
    -   More details about all the available options of the above
        `defGroup`, `addApplication`, etc… commands can be found on the
        [[The\_Experiment\_Controller\_API|OEDL reference pages]].

### 3.2 Event-based Action Descriptions (Line 20 to 29)

OMF uses an event-based approach to describe the different actions
required to perform during an experiment. Basically, you can define
events and the sets of actions to execute when they are triggered.
Events can be characterise by many different conditions. For example, an
event can be “when nodes in group X are all powered ON”, or “when
measured data Z reaches a threshold X”, or “when interface of node Y is
configured”, …

In this simple experiment, we are only interested in 1 event, which is
`:ALL_UP_AND_INSTALLED` = “when all the nodes are ON, and all the
required applications are installed on them”.

OMF comes with a set of default events, which have already been defined
for you, and `:ALL_UP_AND_INSTALLED` is one of them. All we have to do
here is specify the tasks that we would like to do when that event
occurs, which is the call to `onEvent(...)` on line 20.

-   **Line 20-29**: here we declare what to do when the event
    `:ALL_UP_AND_INSTALLED` happens:
    -   line 21, 24, 27: print some messages on the standard output when
        our experiment is running
    -   Line 22: instruct the controller to pause for 10 sec
    -   Line 23: tell all the Groups of this experiment to start all the
        applications associated to them. In this tutorial, this command
        will tell all the nodes in the groups “Sender” and “Receiver” to
        start their associated applications.
    -   Line 25: wait for 30 sec. Basically, here we are giving time for
        UDP traffic to be exchanged from “Sender” to “Receiver”. This is
        in fact the experiment.
    -   Line 26: tell all the Groups to stop all the applications
        running on all the nodes associated to them.
    -   Line 28: declare the end of the Experiment. This will trigger
        some “cleaning” actions on the nodes (e.g. turn off the network
        interfaces, stop receiving commands for this experiment, etc…)

-   **Note**:
    -   More details about how to define other states or actions to
        perform within them can be found on the [[other tutorial
        pages]].
    -   More details about all the available options of the above
        commands can be found on the
        [[The\_Experiment\_Controller\_API|OEDL reference pages]].

4. Running the “Hello World” Experiment
---------------------------------------

### 4.1. How do you run it?

Please refer to the above Section 2 to find out how to access an
OMF-enabled testbed and how to reserve resources on it, if necessary.
The rest of this section assumes that you are using an NICTA or WINLAB
testbeds, and that you have installed a baseline image on your resources
(i.e. NICTA’s and WINLAB’s baseline image have the applications OTG2 and
OTR2 pre-installed).

The command line `omf exec` invokes the Experiment Controller (EC)
application, which will be orchestrating the experiment execution on
your behalf. As explained on the [[An\_Introduction\_to\_OMF|OMF
Introduction page]], the EC will interprets your ED and send commands to
the various Resource Controllers (RCs) and Aggregate Manager (AM)
related to the resources in your experiment. These commands will
configure the resources and instruct them to perform actions.

-   First you need to create an file, which will hold your experiment
    description:
    -   use your favorite editor to create a new file in your home
        directory on the console of the testbed (e.g. `hello-world.rb`)
    -   cut-and-paste the above “Hello World” ED into this file and save
        it
    -   or download the experiment file directly from here:
        attachment:hello-world.rb

-   Now invoke the EC to run your experiment

<!-- -->

    omf-<version> exec hello-world.rb

-   You can use the command `omf-<version> help exec` to get a full list
    of options for the `omf-<version> exec` command.

### 4.2. What you should see on the console:

When running the EC with the above command, you should see an output
similar to this (note that in this particular instance, we are using
node28 and node29):

    <code class="text">
      INFO NodeHandler: OMF Experiment Controller 5.4 (git 97ed1a2)
     INFO NodeHandler: Slice ID: default_slice (default)
     INFO NodeHandler: Experiment ID: default_slice-2013-03-06t16.55.53+11.00
     INFO NodeHandler: Message authentication is disabled
     INFO Experiment: load system:exp:stdlib
     INFO property.resetDelay: resetDelay = 210 (Fixnum)
     INFO property.resetTries: resetTries = 1 (Fixnum)
     INFO Experiment: load system:exp:eventlib
     INFO Experiment: load wired.rb
     INFO Topology: Loading topology 'omf.nicta.node36'.
     INFO Topology: Loading topology 'omf.nicta.node37'.
     INFO Experiment: Switching ON resources which are OFF
     INFO ALL_UP_AND_INSTALLED: Event triggered. Starting the associated tasks.
     INFO exp: This is my first OMF experiment
     INFO exp: Request from Experiment Script: Wait for 10s....
     INFO exp: All my Applications are started now...
     INFO exp: Request from Experiment Script: Wait for 30s....
     INFO exp: All my Applications are stopped now.
     INFO EXPERIMENT_DONE: Event triggered. Starting the associated tasks.
     INFO NodeHandler: 
     INFO NodeHandler: Shutting down experiment, please wait...
     INFO NodeHandler: 
     INFO run: Experiment default_slice-2013-03-06t16.55.53+11.00 finished after 0:53
    </code>

-   Line 1-5: some information about the EC and your experiment:
    -   line 1: the EC’s version & revision number
    -   line 2: the name of your slice, here: `testing_slice`
    -   line 3: the ID of your experiment, here:
        `testing_slice-2010-09-03t09.41.43+10.00`
    -   line 4: the EC says that it is running without message
        authentication

-   Line 6-12: some information about the properties of your experiment

-   Line 13: indicates that the `:ALL_UP_AND_INSTALLED` event has been
    triggered, thus the EC will now execute the commands declared in the
    associated `onEvent` block, which we described in the above ED
-   Line 15: indicates that your experiment is waiting for 10sec as you
    requested in the ED
-   Line 16-18: some information about the execution of your experiment
-   Line 19: indicates that your experiment has reached the
    Experiment.Done statement in the ED, i.e. the event
    `:EXPERIMENT_DONE` has been triggered

-   **Note**:
    -   your experiment will generate a log file, which will be located
        at: `/tmp/Your_Experiment_ID.log`
    -   the EC in your experiment will also keep a XML tree describing
        the state of your experiment, which will be located at
        `/tmp/Your_Experiment_ID-state.xml`
    -   in the case of the above experiment run, here are two examples
        of these files:
        -   attachment:hello-world.EC.log
        -   attachment:hello-world.EC-state.log

5. Accessing the Results from the Experiment
--------------------------------------------

In the above ED, we requested the collection of measurements from two
Measurement Points (MP):\
\* the `udp_out` MP provided by the OTG2 application \
\* the `udp_in` MP provided by the OTR2 application

Thus, while the experiment was running, these applications were
forwarding measurements to the OML framework (refer to the
[[An\_Introduction\_to\_OMF\#OMLIntro|OMF Introduction page]] for more
details). The OML server stored these measurements in a SQL database.

### 5.1 How do you access the measurement database after the experiment stops?

Currently the collected measurements are stored in a SQLite database,
which is located on the server that runs the OML Measurement Collection
Server. For each new experiment execution, an measurement database is
created with the same name as the Experiment ID. In this example, the
experiment database has the name
`testing_slice-2010-09-03t09.41.43+10.00`.

Every OMF installation has one or more Aggregate Manager(s) providing a
range of services to manage the testbed resources. One of these services
is called *result*, and as its name implies, it provides an easy access
to experiment results. One of the possible ways to access your result
database, is to request a database dump of it from the *result* AM
service.

-   First, find out the hostname and port of the *result* AM service on
    your OMF-enalbed testbed
    -   For NICTA, this service is running on the console of your
        testbed. Its host & port are: “localhost:50<version_compact>”
    -   For WINLAB, this services is running on the server at the host &
        port: “oml:50<version_compact>”

-   To request a dump of your result database from the console:

<!-- -->

    ## At NICTA
    wget "http://localhost:50<version_compact>/result/dumpDatabase?expID=testing_slice-2010-09-03t09.41.43%2B10.00" -O myDatabase

    ## At WINLAB
    wget "http://oml:50<version_compact>/result/dumpDatabase?expID=testing_slice-2010-09-03t09.41.43%2B10.00" -O myDatabase

-   Note that as we are using an HTTP interface in this example and our
    experiment ID has a “+” in this example, we need to escape it with
    is ascii code “%2B”

-   You should now have a file named “myDatabase” which is a SQLite dump
    of your result database. The database dump for this Hello World
    experiment is attached here: attachment:myDatabase

-   You can open this database, an run queries on it (refer to the
    [SQLITE3](http://www.sqlite.org) website for more information on how
    to do this)

<!-- -->

    sqlite3 -init myDatabase myDatabase.sq3

-   Note: the *result* AM service provides more functions than just
    “dump a database”, a list of its other functions is available on
    [[AM\_Services\_Result|the Result AM page]].

-   Also please refer to the [[oml:|OML Documentation pages]] to learn
    more about the different tables and fields in any OML generated
    measurement database

Another way to access experiment result is to use the omf-web-basic
program from omf\_web gem to launch a web interface where you can browse
data and view line graph visualisation. The interface looks like this:

![](/attachments/609/2012-02-08-132036_686x744_scrot.png)

Please go to this page for more detailed instructions: [[Experiment
Visualisation]].

6. What is Next?
----------------

Now that you know how to develop and run a simple experiment, you may
want to read the following basic OMF tutorials. Each one of them is
introducing an OMF feature, using this simple “Hello World” experiment
as a base. You do not need to follow them in the order suggested below.

-   [[BasicTutorialStage1-5-4|How to pass parameters to your experiment,
    and change them at run-time]]

-   [[BasicTutorialStage2-5-3|How to configure or address all resources
    within a defined group, and use simple substitutions]]

-   [[BasicTutorialStage3-5-3|How to use your own or a 3rd party
    application with OMF]]

-   [[BasicTutorialStage4-5-3|How to use Measurement Filters to
    customise your Measurement]]

-   [[BasicTutorialStage5-5-3|How to use Prototypes to specify
    particular Applications]]

-   [[BasicTutorialStage6-5-3|How to save a disk image]]

-   [[BasicTutorialStage7-5-3|How to load a disk image]]

And finally, a “Conference Room” scenario which combines all of the
above features:

-   [[BasicTutorialStage8-5-3|The Conference Room tutorial]]

* * * * *
